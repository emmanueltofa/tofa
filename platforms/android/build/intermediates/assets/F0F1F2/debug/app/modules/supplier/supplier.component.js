"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var router_1 = require("@angular/router");
var nativescript_telegram_image_picker_1 = require("nativescript-telegram-image-picker");
var Sqlite = require("nativescript-sqlite");
var Supplier = (function () {
    function Supplier(route) {
        var _this = this;
        this.route = route;
        this.selectedIndex = 1;
        this.supplier = [];
        (new Sqlite("my.db")).then(function (db) {
            db.execSQL("CREATE TABLE IF NOT EXISTS people (id INTEGER PRIMARY KEY AUTOINCREMENT, firstname TEXT, lastname TEXT)").then(function (id) {
                _this.database = db;
            }, function (error) {
                console.log("CREATE TABLE ERROR", error);
            });
        }, function (error) {
            console.log("OPEN DB ERROR", error);
        });
        this.items = [];
        for (var i = -1; i < 5; i++) {
            this.items.push("data item " + i);
        }
        ;
    }
    Supplier.prototype.ngOnInit = function () {
    };
    Supplier.prototype.onchange = function (args) {
        console.log("Drop Down selected index changed from " + args.oldIndex + " to " + args.newIndex);
    };
    Supplier.prototype.onopen = function () {
        console.log("Drop Down opened.");
    };
    Supplier.prototype.open = function () {
        // Open the Telegram Gallery Image Picker Activity      
        nativescript_telegram_image_picker_1.openTelegramImagePicker(5).then(function (resp) {
            // looping over the selected pictures in the response        
            for (var i = 0; i < resp.photos.length; i++) {
                console.log(resp.photos[i]);
            }
        });
    };
    Supplier.prototype.insert = function () {
        var _this = this;
        this.database.execSQL("INSERT INTO people (firstname, lastname) VALUES (?, ?)", ["Nic", "Raboy"]).then(function (id) {
            console.log("INSERT RESULT", id);
            _this.fetch();
        }, function (error) {
            console.log("INSERT ERROR", error);
        });
    };
    Supplier.prototype.fetch = function () {
        var _this = this;
        this.database.all("SELECT * FROM people").then(function (rows) {
            _this.supplier = [];
            for (var row in rows) {
                _this.supplier.push({
                    "firstname": rows[row][1],
                    "lastname": rows[row][2]
                });
            }
        }, function (error) {
            console.log("SELECT ERROR", error);
        });
    };
    return Supplier;
}());
Supplier = __decorate([
    core_1.Component({
        selector: "ns-details",
        moduleId: module.id,
        templateUrl: "./supplier.html",
        styleUrls: ["./supplier.css"]
    }),
    __metadata("design:paramtypes", [router_1.ActivatedRoute])
], Supplier);
exports.Supplier = Supplier;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VwcGxpZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3VwcGxpZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQWtEO0FBQ2xELDBDQUFpRDtBQUVqRCx5RkFBcUc7QUFDckcsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLHFCQUFxQixDQUFDLENBQUM7QUFZNUMsSUFBYSxRQUFRO0lBZWpCLGtCQUNZLEtBQXFCO1FBRGpDLGlCQWlCQztRQWhCVyxVQUFLLEdBQUwsS0FBSyxDQUFnQjtRQWYxQixrQkFBYSxHQUFHLENBQUMsQ0FBQztRQWlCdkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFDakIsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLEVBQUU7WUFDekIsRUFBRSxDQUFDLE9BQU8sQ0FBQyx5R0FBeUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLEVBQUU7Z0JBQ3pILEtBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO1lBQ3ZCLENBQUMsRUFBRSxVQUFBLEtBQUs7Z0JBQ0osT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUM3QyxDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsRUFBRSxVQUFBLEtBQUs7WUFDSixPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN4QyxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUMxQixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFBQSxDQUFDO1FBQUEsQ0FBQztJQUM1QyxDQUFDO0lBRUQsMkJBQVEsR0FBUjtJQUVBLENBQUM7SUFDTSwyQkFBUSxHQUFmLFVBQWdCLElBQW1DO1FBQy9DLE9BQU8sQ0FBQyxHQUFHLENBQUMsMkNBQXlDLElBQUksQ0FBQyxRQUFRLFlBQU8sSUFBSSxDQUFDLFFBQVUsQ0FBQyxDQUFDO0lBQzlGLENBQUM7SUFFTSx5QkFBTSxHQUFiO1FBQ0ksT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFHRSx1QkFBSSxHQUFYO1FBRUksd0RBQXdEO1FBQ3hELDREQUF1QixDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLElBQTRCO1lBQzFELDZEQUE2RDtZQUM3RCxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7Z0JBQzVDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzlCLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQTtJQUVOLENBQUM7SUFFTSx5QkFBTSxHQUFiO1FBQUEsaUJBT0s7UUFORyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyx3REFBd0QsRUFBRSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLEVBQUU7WUFDckcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDakMsS0FBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2pCLENBQUMsRUFBRSxVQUFBLEtBQUs7WUFDSixPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN2QyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFTSx3QkFBSyxHQUFaO1FBQUEsaUJBWUM7UUFYRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLElBQUk7WUFDL0MsS0FBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7WUFDbkIsR0FBRyxDQUFBLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDbEIsS0FBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7b0JBQ2YsV0FBVyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3pCLFVBQVUsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUMzQixDQUFDLENBQUM7WUFDUCxDQUFDO1FBQ0wsQ0FBQyxFQUFFLFVBQUEsS0FBSztZQUNKLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUdMLGVBQUM7QUFBRCxDQUFDLEFBbEZELElBa0ZDO0FBbEZZLFFBQVE7SUFScEIsZ0JBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxZQUFZO1FBQ3RCLFFBQVEsRUFBRSxNQUFNLENBQUMsRUFBRTtRQUNuQixXQUFXLEVBQUUsaUJBQWlCO1FBQzlCLFNBQVMsRUFBRSxDQUFDLGdCQUFnQixDQUFDO0tBQ2hDLENBQUM7cUNBbUJxQix1QkFBYztHQWhCeEIsUUFBUSxDQWtGcEI7QUFsRlksNEJBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSB9IGZyb20gXCJAYW5ndWxhci9yb3V0ZXJcIjtcbmltcG9ydCB7IFNlbGVjdGVkSW5kZXhDaGFuZ2VkRXZlbnREYXRhIH0gZnJvbSBcIm5hdGl2ZXNjcmlwdC1kcm9wLWRvd25cIjtcbmltcG9ydCB7IG9wZW5UZWxlZ3JhbUltYWdlUGlja2VyLCBUZWxlZ3JhbVBpY2tlclJlc3BvbnNlIH0gZnJvbSAnbmF0aXZlc2NyaXB0LXRlbGVncmFtLWltYWdlLXBpY2tlcic7XG52YXIgU3FsaXRlID0gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC1zcWxpdGVcIik7XG5cblxuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogXCJucy1kZXRhaWxzXCIsXG4gICAgbW9kdWxlSWQ6IG1vZHVsZS5pZCxcbiAgICB0ZW1wbGF0ZVVybDogXCIuL3N1cHBsaWVyLmh0bWxcIixcbiAgICBzdHlsZVVybHM6IFtcIi4vc3VwcGxpZXIuY3NzXCJdXG59KVxuXG5cbmV4cG9ydCBjbGFzcyBTdXBwbGllciBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgcHVibGljIHNlbGVjdGVkSW5kZXggPSAxO1xuICAgIHB1YmxpYyBpdGVtczogQXJyYXk8c3RyaW5nPjtcbiAgICBwdWJsaWMgZmlybTogQXJyYXk8c3RyaW5nPjtcbiAgICBwdWJsaWMgaW5kdXN0cnk6IEFycmF5PHN0cmluZz47XG4gICAgcHVibGljIG1wcm9kdWN0czogQXJyYXk8c3RyaW5nPjtcbiAgICBwdWJsaWMgbWNhdGVnb3JpZXM6QXJyYXk8c3RyaW5nPjtcbiAgICBwdWJsaWMgcGNhdGVnb3JpZXM6QXJyYXk8c3RyaW5nPjtcbiAgICBwdWJsaWMgcHRlcm1zOkFycmF5PHN0cmluZz47XG4gICAgcHVibGljIG1jb3ZlcmVkOkFycmF5PHN0cmluZz47XG4gICAgcHVibGljIEhRdWFsaWZpY2F0aW9uOkFycmF5PHN0cmluZz47XG5cbiAgICBwcml2YXRlIGRhdGFiYXNlOiBhbnk7XG4gICAgcHVibGljIHN1cHBsaWVyOiBBcnJheTxhbnk+O1xuICAgIFxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVxuICAgICkgXG4gICAgeyB0aGlzLnN1cHBsaWVyID0gW107XG4gICAgICAgIChuZXcgU3FsaXRlKFwibXkuZGJcIikpLnRoZW4oZGIgPT4ge1xuICAgICAgICAgICAgZGIuZXhlY1NRTChcIkNSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTIHBlb3BsZSAoaWQgSU5URUdFUiBQUklNQVJZIEtFWSBBVVRPSU5DUkVNRU5ULCBmaXJzdG5hbWUgVEVYVCwgbGFzdG5hbWUgVEVYVClcIikudGhlbihpZCA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhYmFzZSA9IGRiO1xuICAgICAgICAgICAgfSwgZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ1JFQVRFIFRBQkxFIEVSUk9SXCIsIGVycm9yKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCBlcnJvciA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIk9QRU4gREIgRVJST1JcIiwgZXJyb3IpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLml0ZW1zID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAtMTsgaSA8IDU7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5pdGVtcy5wdXNoKFwiZGF0YSBpdGVtIFwiICsgaSk7fTtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcblxuICAgIH1cbiAgICBwdWJsaWMgb25jaGFuZ2UoYXJnczogU2VsZWN0ZWRJbmRleENoYW5nZWRFdmVudERhdGEpIHtcbiAgICAgICAgY29uc29sZS5sb2coYERyb3AgRG93biBzZWxlY3RlZCBpbmRleCBjaGFuZ2VkIGZyb20gJHthcmdzLm9sZEluZGV4fSB0byAke2FyZ3MubmV3SW5kZXh9YCk7XG4gICAgfVxuIFxuICAgIHB1YmxpYyBvbm9wZW4oKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiRHJvcCBEb3duIG9wZW5lZC5cIik7XG4gICAgfVxuXG5cbnB1YmxpYyBvcGVuKCkge1xuXG4gICAgLy8gT3BlbiB0aGUgVGVsZWdyYW0gR2FsbGVyeSBJbWFnZSBQaWNrZXIgQWN0aXZpdHkgICAgICBcbiAgICBvcGVuVGVsZWdyYW1JbWFnZVBpY2tlcig1KS50aGVuKChyZXNwOiBUZWxlZ3JhbVBpY2tlclJlc3BvbnNlKSA9PiB7XG4gICAgICAgLy8gbG9vcGluZyBvdmVyIHRoZSBzZWxlY3RlZCBwaWN0dXJlcyBpbiB0aGUgcmVzcG9uc2UgICAgICAgIFxuICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzcC5waG90b3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgIGNvbnNvbGUubG9nKHJlc3AucGhvdG9zW2ldKTtcbiAgICAgICB9XG4gICAgfSlcblxufVxuXG5wdWJsaWMgaW5zZXJ0KCkge1xuICAgICAgICB0aGlzLmRhdGFiYXNlLmV4ZWNTUUwoXCJJTlNFUlQgSU5UTyBwZW9wbGUgKGZpcnN0bmFtZSwgbGFzdG5hbWUpIFZBTFVFUyAoPywgPylcIiwgW1wiTmljXCIsIFwiUmFib3lcIl0pLnRoZW4oaWQgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJJTlNFUlQgUkVTVUxUXCIsIGlkKTtcbiAgICAgICAgICAgIHRoaXMuZmV0Y2goKTtcbiAgICAgICAgfSwgZXJyb3IgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJJTlNFUlQgRVJST1JcIiwgZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICB9XG4gXG4gICAgcHVibGljIGZldGNoKCkge1xuICAgICAgICB0aGlzLmRhdGFiYXNlLmFsbChcIlNFTEVDVCAqIEZST00gcGVvcGxlXCIpLnRoZW4ocm93cyA9PiB7XG4gICAgICAgICAgICB0aGlzLnN1cHBsaWVyID0gW107XG4gICAgICAgICAgICBmb3IodmFyIHJvdyBpbiByb3dzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdXBwbGllci5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgXCJmaXJzdG5hbWVcIjogcm93c1tyb3ddWzFdLFxuICAgICAgICAgICAgICAgICAgICBcImxhc3RuYW1lXCI6IHJvd3Nbcm93XVsyXVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBlcnJvciA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlNFTEVDVCBFUlJPUlwiLCBlcnJvcik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuXG59XG4gICAgXG5cbiJdfQ==